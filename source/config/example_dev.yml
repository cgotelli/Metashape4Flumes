# This is an example yaml configuration for a metashape run

#### Project-level parameters:

# Project to load. If not a blank string, this will open an existing project at the path specified. If a blank string, creates a new empty project.
# Even if opening an existing project, all processing on it is saved as a new project (path and name specified below). The original project file is not modified.
# When no project is specified, photos are automatically added to the new project as the first step. When a project is specified, photos are not added because they are assumed to be in the project.
load_project: "/storage/forestuav/metashape_projects/comparison_project/paramset15a_001_20201026T1003.psx" #"/storage/temp/test_usgs_gradual_pre_20200326T1506.psx"

# The path to the directory of flight photos
# If there are multiple photo folders, set path to the folder that contains all the photo folders
photo_path: "/storage/forestuav/imagery/missions_thinned/set15a_thin22"
multispectral: False # Is this a multispectral photo set? If RGB, set to False.

# Path for exports (e.g., points, DSM, orthomosaic) and processing log. Will be created if does not exist.
output_path: "/storage/temp_test_region"

# Path to save Metashape project file (.psx). Will be created if does not exist
project_path: "/storage/temp_test_region"

# The identifier for the run. Will be used in naming output files. Recommended to include a photoset name and processing parameter set name.
run_name: "expand_region"

# CRS EPSG code that project outputs should be in (projection should be in meter units and intended for the project area)
project_crs: "EPSG::26910" # 26910 is UTM 10N

# Enable metashape "fine-level task subdivision" which reduces memory use by breaking processing into independent chunks that are run in series.
# Assuming there's enough memory, it seems to run 10-20% faster by disabling subdividing. But large projects can run out memory and fail if subdivide is not enabled.
subdivide_task: True

#### Processing parameters:
## Steps can be run or skipped using the 'enabled' parameter. If enabled == False, everything else in the step is irrelevant.
## The metashape functions powering each of these steps are listed in the comments in parentheses.
## Refer to Metashape documentation for full parameter definitions: https://www.agisoft.com/pdf/metashape_python_api_1_5_0.pdf
## Parameter names here generally follow the parameter names of the Metashape functions.

calibrateReflectance: # (Metahsape: calibrateReflectance)
    enabled: False
    panel_filename: "RP04-1923118-OB.csv" # The calibration file must be in the "calibration" folder in the top-level project photos directory. See example panel calibration file in the calibration directory of project repo.
    use_reflectance_panels: True
    use_sun_sensor: True

alignPhotos: # (Metashape: alignPhotos)
    enabled: True
    downscale: 4 # Recommended: 1. How much to coarsen the photos when searching for tie points. Higher number for blurrier photos. Probably only accepts numbers 4^x.
    adaptive_fitting: True # Recommended: True. Should the camera lens model be fit at the same time as aligning photos?

filterPointsUSGS:
    enabled: True
    rec_thresh_percent: 20
    rec_thresh_absolute: 15
    proj_thresh_percent: 30
    proj_thresh_absolute: 2
    reproj_thresh_percent: 5
    reproj_thresh_absolute: 0.3

# To use GCPs, a 'gcps' folder must exist in the top level photos folder. The contents of the 'gcps' folder are created by the prep_gcps.R script. See readme: https://github.com/ucdavis/metashape
addGCPs:
    enabled: True
    gcp_crs: "EPSG::26910" # CRS EPSG code of GCP coordinates. 26910 (UTM 10 N) is the CRS of the sample RGB photoset.
    marker_location_accuracy: 0.1 # Recommended: 0.1. Accuracy of GCPs real-world coordinates, in meters.
    marker_projection_accuracy: 8 # Recommended: 8. Accuracy of the identified locations of the GCPs within the images, in pixels.
    optimize_w_gcps_only: True # Optimize alignment using GCPs only: required for GCP locations to take precedence over photo GPS data. Disabling it makes GCPs essentially irrelevant.

optimizeCameras: # (Metashape: optimizeCameras)
    enabled: True
    adaptive_fitting: True # Recommended: True. Should the camera lens model be fit at the same time as optinizing photos?

buildDenseCloud: # (Metashape: buildDepthMaps, buildDenseCloud, classifyGroundPoints, and exportPoints)
    enabled: False
    ## For depth maps (buldDepthMaps)
    downscale: 4 # Recommended: 4. How much to coarsen the photos when searching for matches to build the dense cloud. For large photosets, values < 4 likely take prohibitively long. Probably only accepts numbers 4^x.
    filter_mode: Metashape.MildFiltering # Recommended: Metashape.MildFiltering. How to filter the point cloud. Options are NoFiltering, MildFiltering, ModerateFiltering, AggressiveFiltering. Aggressive filtering removes detail and makes worse DEMs (at least for forest). NoFiltering takes very long. In trials, it never completed.
    reuse_depth: False # Recommended: False. Purpose unknown.
    ## For dense cloud (buildDenseCloud)
    keep_depth: False # Recommended: False. Purpose unknown.
    ## For both
    max_neighbors: 100 # Recommended: 100. Maximum number of neighboring photos to use for estimating point cloud. Higher numbers may increase accuracy but dramatically increase processing time.
    ## For ground point classification (classifyGroundPoints). Definitions here: https://www.agisoft.com/forum/index.php?topic=9328.0
    classify: True # Must be enabled if a digital terrain model (DTM) is needed either for orthomosaic or DTM export
    max_angle: 15.0 # Recommended: 15.0
    max_distance: 1.0 # Recommended: 1.0
    cell_size: 50.0 # Recommended: 50.0
    ## For dense cloud export (exportPoints)
    export: True # Whether to export dense cloud file.
    format: Metashape.PointsFormatLAS # Recommended: PointsFormatLAS. The file format to export points in.
    classes: "ALL" # Recommended: "ALL". Point classes to export. Must be a list. Or can set to "ALL" to use all points. An example of a specific class is: Metashape.PointClass.Ground

buildDem: # (Metashape: buildDem, exportRaster)
    enabled: False
    ## For building DEM (buildDem)
    type: "both" # Recommended: "both". Options: "DSM" or "DTM" or "both". Type of DEM to exporot (digital surface model, digital terrain model, or both).
    ## For exporting DEM (exportRaster)
    export: True # Whether to export DEM(s)
    tiff_big: True # Recommended: True. Use BigTIFF format? Required for larger projects with large DEMs
    tiff_tiled: False # Recommended: False. Use tiled TIFF? This is related to internal file architecture.
    nodata: -32767 # Recommended: -32767. Value used to represent nodata.
    tiff_overviews: True # Recommended: True. Include coarse-scale raster data in file for quick display in GIS.

buildOrthomosaic: # (Metashape: buildOrthomosaic, exportRaster)
    enabled: False
    ## For building orthomosaic (buildOrthomosaic)
    surface: "USGS" # Recommended: "USGS" (assuming a USGS DEM is available and GCPs with accurate elvevation data are being used). The surface to build the orthomosaic onto. "DTM", "DSM", or "USGS". DTM and DSM refer to elevation models built by Metashape (buildDem step above) and stored in the project. If USGS, you must use GCPs with accurate elevations (ideally extracted from the USGS DEM).
    usgs_dem_path: "dem_usgs/dem_usgs.tif" # Path to USGS DEM for the project area. Needed if surface (parameter above) is "USGS".
    usgs_dem_crs: "EPSG::4269" # CRS of the USGS DEM. Needed if surface (parameter above) is "USGS". For sample RGB photoset, crs is 4269 (Geographic NAD83)
    blending: Metashape.MosaicBlending # Recommended: Metashape.MosaicBlending. Photo blending mode. Options include AverageBlending, MosaicBlending, MinBlending, MaxBlending, DisabledBlending
    fill_holes: True # Recommended: True. Fill holes in orthomosaic where no photo data exist by interpolating?
    refine_seamlines: True # Recommended: True. Use smart algorithm to identify photo seamlines where they will least distort.
    ## For exporting orthomosaic (exportRaster)
    export: True # Whether to export orthomosaic
    tiff_big: True # Recommended: True. Use BigTIFF format? Required for larger projects with large DEMs
    tiff_tiled: False # Recommended: False. Use tiled TIFF? This is related to internal file architecture.
    nodata: -32767 # Recommended: -32767. Value used to represent nodata.
    tiff_overviews: True # Recommended: True. Include coarse-scale raster data in file for quick display in GIS.
